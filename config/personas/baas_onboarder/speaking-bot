# Speaking Bot Github repository

Deploy AI-powered meeting agents that can join and participate in Zoom and Microsoft Teams (and soon on Teams!). These agents have distinct personalities and can engage in conversations based on predefined personas defined in Markdown files.

## Overview

The Meeting Agent Bot allows you to:

-   Launch one or more AI agents into Google Meet or Microsoft Teams (Zoom is due ASAP)
-   Give each agent a unique personality and conversation style
-   Run multiple instances locally or scale to web deployment

## Technical Stack

This bot utilizes:

-   MeetingBaas's APIs for meeting interactions
-   Pipecat's `WebsocketServerTransport` for real-time communication
-   Ngrok for local server exposure

### Multiple Instance Architecture

When running multiple bot instances:

-   Each bot requires a unique public Ngrok URL
-   MeetingBaas communicates with each bot through its dedicated WebSocket
-   Pipecat handles the real-time message routing

**Current Limitations**

Currently, the app only supports 2 simultaneous agents in meetings, limited by local development and ngrok.

**Running Meeting Agents**

To run 1 or 2 meeting agents in a meeting, execute the following commands:

```bash
# For 1 agent
poetry run python scripts/batch.py -c 1 --meeting-url (GOOGLE_MEET-TEAMS)-link

# For 2 agents
poetry run python scripts/batch.py -c 2 --meeting-url (GOOGLE_MEET-TEAMS)-link

# For 2 agents with chosen personalities
poetry run python scripts/batch.py -c 2 --meeting-url (GOOGLE_MEET-TEAMS)-link --personas water_merchant arctic_prospector
```

## Persona Configuration

### Structure

Personas are stored in the `@personas` directory. Each persona has:

-   A README.md defining their personality
-   Space for additional markdown files to expand behavior
-   Consistent characteristics across all personas:
    -   Gen-Z speech patterns
    -   Technical expertise
    -   Playful personality
    -   Domain-specific knowledge

### Example Persona Structure

```
@personas/
└── quantum_physicist/
    ├── README.md
    └── (additional behavior files)
```

## Prerequisites

-   Python 3.x
-   `grpc_tools` for protocol buffer compilation
-   Ngrok (for local deployment)
-   Poetry for dependency management

## Installation

### 1. Set Up Poetry Environment

```bash
# Install Poetry (Unix/macOS)
curl -sSL https://install.python-poetry.org | python3 -

# Install Poetry (Windows)
(Invoke-WebRequest -Uri https://install.python-poetry.org -UseBasicParsing).Content | py -

# Install dependencies
poetry install

# Activate virtual environment
poetry shell
```

### 2. Compile Protocol Buffers

```bash
poetry run python -m grpc_tools.protoc --proto_path=./protobufs --python_out=./protobufs frames.proto
```

### 3. Configure Environment

```bash
cp env.example .env
```

Edit `.env` with your MeetingBaas credentials.

## Running Meeting Agents

### Single Agent Deployment

To launch one agent into a meeting:

```bash
poetry run python scripts/batch.py -c 1 --meeting-url <your-meeting-url>
```

### Multiple Agent Deployment

To launch two agents simultaneously:

```bash
poetry run python scripts/batch.py -c 2 --meeting-url <your-meeting-url>
```

### Local Deployment with Ngrok

For 1-2 agents, use Ngrok to expose your local server:

```bash
ngrok start --all --config ~/.config/ngrok/ngrok.yml,./config/ngrok/config.yml
```

### Web Deployment

For more than 2 agents, deploy to a web server to avoid Ngrok limitations.

## Future Extensibility

The persona architecture is designed to support:

-   Additional behavior files
-   More detailed conversation patterns
-   Specialized knowledge bases
-   Custom interaction styles

## Troubleshooting

-   Verify Poetry environment is activated
-   Check Ngrok connection status
-   Validate environment variables
-   Ensure unique Ngrok URLs for multiple agents

## Best Practices

-   Test personas in a private meeting first
-   Monitor agent behavior during initial deployment
-   Keep meeting URLs secure
-   Regular updates to persona configurations

For more detailed information about specific personas or deployment options, check the respective documentation in the `@personas` directory.
